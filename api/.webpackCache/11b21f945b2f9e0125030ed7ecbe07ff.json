{"remainingRequest":"/home/barnaby/code/antibody-web/serverless/node_modules/babel-loader/lib/index.js!/home/barnaby/code/antibody-web/serverless/handlers/update/handler.ts","dependencies":[{"path":"/home/barnaby/code/antibody-web/serverless/handlers/update/handler.ts","mtime":1591182131097},{"path":"/home/barnaby/code/antibody-web/serverless/.babelrc","mtime":1591182054525},{"path":"/home/barnaby/code/antibody-web/serverless/node_modules/cache-loader/dist/cjs.js","mtime":1591181641368},{"path":"/home/barnaby/code/antibody-web/serverless/node_modules/babel-loader/lib/index.js","mtime":1590479556893}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcHV0VGVzdFJlY29yZCB9IGZyb20gJy4uLy4uL2FwaS9hd3MnOwppbXBvcnQgeyB2YWxpZGF0ZVVwZGF0ZVJlcXVlc3QsIHZhbGlkYXRlVXBkYXRlRW52aXJvbm1lbnQgfSBmcm9tICcuLi8uLi9hcGkvdmFsaWRhdGUnOwppbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZyc7CmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgZXZlbnQgPT4gewogIHZhciBfZXZlbnQkcmVxdWVzdENvbnRleHQ7CgogIGNvbnN0IGd1aWQgPSAoX2V2ZW50JHJlcXVlc3RDb250ZXh0ID0gZXZlbnQucmVxdWVzdENvbnRleHQuYXV0aG9yaXplcikgPT09IG51bGwgfHwgX2V2ZW50JHJlcXVlc3RDb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZXZlbnQkcmVxdWVzdENvbnRleHQucHJpbmNpcGFsSWQ7CgogIGlmICghZ3VpZCkgewogICAgcmV0dXJuIHsKICAgICAgc3RhdHVzQ29kZTogNDAwLAogICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgZXJyb3I6ICJNaXNzaW5nIHVzZXIgaWQiCiAgICAgIH0pLAogICAgICBoZWFkZXJzOiBjb25maWcuZGVmYXVsdEhlYWRlcnMKICAgIH07CiAgfQoKICBjb25zdCBwYXJzZWRCb2R5ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTsKCiAgaWYgKCFwYXJzZWRCb2R5KSB7CiAgICByZXR1cm4gewogICAgICBzdGF0dXNDb2RlOiA0MDAsCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBlcnJvcjogIk1pc3NpbmcgZXZlbnQgYm9keSIKICAgICAgfSksCiAgICAgIGhlYWRlcnM6IGNvbmZpZy5kZWZhdWx0SGVhZGVycwogICAgfTsKICB9IC8vIFZhbGlkYXRpb24KCgogIGNvbnN0IHsKICAgIGVycm9yOiBlbnZFcnJvcgogIH0gPSB2YWxpZGF0ZVVwZGF0ZUVudmlyb25tZW50KHByb2Nlc3MuZW52KTsKCiAgaWYgKGVudkVycm9yKSB7CiAgICByZXR1cm4gewogICAgICBzdGF0dXNDb2RlOiA0MDAsCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBlcnJvcjogIkVudmlyb25tZW50IGNvbmZpZ3VyYXRpb24gZXJyb3IiCiAgICAgIH0pLAogICAgICBoZWFkZXJzOiBjb25maWcuZGVmYXVsdEhlYWRlcnMKICAgIH07CiAgfQoKICBjb25zdCBEWU5BTU9fVEFCTEUgPSBwcm9jZXNzLmVudi5EWU5BTU9fVEFCTEU7IC8vUHVsbCBvdXQgb3VyIHZhcmlhYmxlcyBmcm9tIHRoZSBldmVudCBib2R5LCBvbmNlIHZhbGlkYXRlZAoKICBjb25zdCB7CiAgICB2YWx1ZTogcmVxdWVzdCwKICAgIGVycm9yOiB1cGxvYWRFcnJvcgogIH0gPSB2YWxpZGF0ZVVwZGF0ZVJlcXVlc3QocGFyc2VkQm9keSk7CgogIGlmICh1cGxvYWRFcnJvcikgewogICAgdmFyIF91cGxvYWRFcnJvciRkZXRhaWxzLCBfdXBsb2FkRXJyb3IkZGV0YWlscyQ7CgogICAgcmV0dXJuIHsKICAgICAgc3RhdHVzQ29kZTogNDAwLAogICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgZXJyb3I6ICgoX3VwbG9hZEVycm9yJGRldGFpbHMgPSB1cGxvYWRFcnJvci5kZXRhaWxzKSA9PT0gbnVsbCB8fCBfdXBsb2FkRXJyb3IkZGV0YWlscyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF91cGxvYWRFcnJvciRkZXRhaWxzJCA9IF91cGxvYWRFcnJvciRkZXRhaWxzWzBdKSA9PT0gbnVsbCB8fCBfdXBsb2FkRXJyb3IkZGV0YWlscyQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF91cGxvYWRFcnJvciRkZXRhaWxzJC5tZXNzYWdlKSB8fCAiSW52YWxpZCByZXF1ZXN0IGJvZHkiCiAgICAgIH0pLAogICAgICBoZWFkZXJzOiBjb25maWcuZGVmYXVsdEhlYWRlcnMKICAgIH07CiAgfQoKICBjb25zdCB7CiAgICB0ZXN0UmVjb3JkCiAgfSA9IHJlcXVlc3Q7IC8vIE1ha2Ugc3VyZSB3ZSdyZSBhbHdheXMgc2F2aW5nIHRvIHRoZSB1c2VyJ3MgYWN0dWFsIGlkLCBpbiBjYXNlIGFueW9uZSB0cmllcyB0byBzcG9vZiB0aGUgZ3VpZCBpbiB0aGVpciByZXF1ZXN0LgoKICBpZiAodGVzdFJlY29yZC5ndWlkICE9PSBndWlkKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkF0dGVtcHRlZCB0byBzYXZlIHdpdGggdXNlcl9pZCB0aGF0IGRvZXMgbm90IGJlbG9uZyB0byB0aGlzIHVzZXIiKTsKICB9CgogIGF3YWl0IHB1dFRlc3RSZWNvcmQoRFlOQU1PX1RBQkxFLCB0ZXN0UmVjb3JkKTsgLy9SZXNwb25zZQoKICByZXR1cm4gewogICAgc3RhdHVzQ29kZTogMjAwLAogICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICB0ZXN0UmVjb3JkCiAgICB9KSwKICAgIGhlYWRlcnM6IGNvbmZpZy5kZWZhdWx0SGVhZGVycwogIH07Cn07"},{"version":3,"sources":["/home/barnaby/code/antibody-web/serverless/handlers/update/handler.ts"],"names":["putTestRecord","validateUpdateRequest","validateUpdateEnvironment","config","handler","event","guid","requestContext","authorizer","principalId","statusCode","body","JSON","stringify","error","headers","defaultHeaders","parsedBody","parse","envError","process","env","DYNAMO_TABLE","value","request","uploadError","details","message","testRecord","Error"],"mappings":"AACA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,qBAAT,EAAgCC,yBAAhC,QAAiE,oBAAjE;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AAGA,OAAO,MAAMC,OAAO,GAAG,MAAOC,KAAP,IAAkE;AAAA;;AAEvF,QAAMC,IAAI,4BAAGD,KAAK,CAACE,cAAN,CAAqBC,UAAxB,0DAAG,sBAAiCC,WAA9C;;AAEA,MAAI,CAACH,IAAL,EAAW;AACT,WAAO;AACLI,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAE;AADY,OAAf,CAFD;AAKLC,MAAAA,OAAO,EAAEZ,MAAM,CAACa;AALX,KAAP;AAOD;;AAED,QAAMC,UAA6B,GAAGL,IAAI,CAACM,KAAL,CAAWb,KAAK,CAACM,IAAjB,CAAtC;;AAEA,MAAI,CAACM,UAAL,EAAiB;AACf,WAAO;AACLP,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAE;AADY,OAAf,CAFD;AAKLC,MAAAA,OAAO,EAAEZ,MAAM,CAACa;AALX,KAAP;AAOD,GAxBsF,CA2BvF;;;AACA,QAAM;AAAEF,IAAAA,KAAK,EAAEK;AAAT,MAAsBjB,yBAAyB,CAACkB,OAAO,CAACC,GAAT,CAArD;;AAGA,MAAIF,QAAJ,EAAc;AACZ,WAAO;AACLT,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAE;AADY,OAAf,CAFD;AAKLC,MAAAA,OAAO,EAAEZ,MAAM,CAACa;AALX,KAAP;AAOD;;AAED,QAAMM,YAAoB,GAAGF,OAAO,CAACC,GAAR,CAAYC,YAAzC,CAzCuF,CA2CvF;;AACA,QAAM;AAAEC,IAAAA,KAAK,EAAEC,OAAT;AAAkBV,IAAAA,KAAK,EAAEW;AAAzB,MAAyCxB,qBAAqB,CAACgB,UAAD,CAApE;;AAEA,MAAIQ,WAAJ,EAAiB;AAAA;;AACf,WAAO;AACLf,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAE,yBAAAW,WAAW,CAACC,OAAZ,uGAAsB,CAAtB,iFAA0BC,OAA1B,KAAqC;AADzB,OAAf,CAFD;AAKLZ,MAAAA,OAAO,EAAEZ,MAAM,CAACa;AALX,KAAP;AAOD;;AAED,QAAM;AAAEY,IAAAA;AAAF,MAA4CJ,OAAlD,CAxDuF,CA0DvF;;AACA,MAAII,UAAU,CAACtB,IAAX,KAAoBA,IAAxB,EAA8B;AAC5B,UAAM,IAAIuB,KAAJ,CAAU,kEAAV,CAAN;AACD;;AAED,QAAM7B,aAAa,CAACsB,YAAD,EAAeM,UAAf,CAAnB,CA/DuF,CAiEvF;;AAEA,SAAO;AACLlB,IAAAA,UAAU,EAAE,GADP;AAELC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEe,MAAAA;AAAF,KAAf,CAFD;AAGLb,IAAAA,OAAO,EAAEZ,MAAM,CAACa;AAHX,GAAP;AAKD,CAxEM","sourcesContent":["import { APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\nimport { putTestRecord } from '../../api/aws';\nimport { validateUpdateRequest, validateUpdateEnvironment } from '../../api/validate';\nimport { UpdateTestRequest }  from \"abt-lib/requests/UpdateTest\";\nimport config from '../config';\nimport TestRecord from 'abt-lib/models/TestRecord';\n\nexport const handler = async (event: APIGatewayEvent): Promise<APIGatewayProxyResult> => {\n\n  const guid = event.requestContext.authorizer?.principalId;\n\n  if (!guid) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        error: \"Missing user id\"\n      }),\n      headers: config.defaultHeaders\n    };\n  }\n\n  const parsedBody: UpdateTestRequest = JSON.parse(event.body as string);\n\n  if (!parsedBody) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        error: \"Missing event body\"\n      }),\n      headers: config.defaultHeaders\n    };\n  }\n  \n  \n  // Validation\n  const { error: envError } = validateUpdateEnvironment(process.env);\n\n  \n  if (envError) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        error: \"Environment configuration error\"\n      }),\n      headers: config.defaultHeaders\n    };\n  }\n\n  const DYNAMO_TABLE: string = process.env.DYNAMO_TABLE as string;\n\n  //Pull out our variables from the event body, once validated\n  const { value: request, error: uploadError } = validateUpdateRequest(parsedBody);\n  \n  if (uploadError) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        error: uploadError.details?.[0]?.message || \"Invalid request body\" \n      }),\n      headers: config.defaultHeaders\n    };\n  }\n\n  const { testRecord }: {testRecord: TestRecord } = request;\n\n  // Make sure we're always saving to the user's actual id, in case anyone tries to spoof the guid in their request.\n  if (testRecord.guid !== guid) {\n    throw new Error(\"Attempted to save with user_id that does not belong to this user\");\n  }\n\n  await putTestRecord(DYNAMO_TABLE, testRecord);\n  \n  //Response\n    \n  return {\n    statusCode: 200,\n    body: JSON.stringify({ testRecord }),\n    headers: config.defaultHeaders\n  };\n};  \n"]}]}