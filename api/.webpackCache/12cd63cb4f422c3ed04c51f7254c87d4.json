{"remainingRequest":"/home/barnaby/code/antibody-web/serverless/node_modules/babel-loader/lib/index.js!/home/barnaby/code/antibody-web/serverless/handlers/generate/handler.ts","dependencies":[{"path":"/home/barnaby/code/antibody-web/serverless/handlers/generate/handler.ts","mtime":1591180921676},{"path":"/home/barnaby/code/antibody-web/serverless/.babelrc","mtime":1591182054525},{"path":"/home/barnaby/code/antibody-web/serverless/node_modules/cache-loader/dist/cjs.js","mtime":1591181641368},{"path":"/home/barnaby/code/antibody-web/serverless/node_modules/babel-loader/lib/index.js","mtime":1590479556893}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZ2V0VXJscywgZ2V0VGVzdFJlY29yZCwgcHV0VGVzdFJlY29yZCB9IGZyb20gJy4uL2FwaS9hd3MnOwppbXBvcnQgeyB2YWxpZGF0ZUdlbmVyYXRlRW52aXJvbm1lbnQgfSBmcm9tICcuLi9hcGkvdmFsaWRhdGUnOwppbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJzsKZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyBldmVudCA9PiB7CiAgdmFyIF9ldmVudCRyZXF1ZXN0Q29udGV4dDsKCiAgY29uc3QgZ3VpZCA9IChfZXZlbnQkcmVxdWVzdENvbnRleHQgPSBldmVudC5yZXF1ZXN0Q29udGV4dC5hdXRob3JpemVyKSA9PT0gbnVsbCB8fCBfZXZlbnQkcmVxdWVzdENvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ldmVudCRyZXF1ZXN0Q29udGV4dC5wcmluY2lwYWxJZDsKICBjb25zb2xlLmxvZyhndWlkKTsKCiAgaWYgKCFndWlkKSB7CiAgICByZXR1cm4gewogICAgICBzdGF0dXNDb2RlOiA0MDAsCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBlcnJvcjogIk1pc3NpbmcgdXNlciBpZCIKICAgICAgfSksCiAgICAgIGhlYWRlcnM6IGNvbmZpZy5kZWZhdWx0SGVhZGVycwogICAgfTsKICB9CgogIGNvbnN0IFVQTE9BRF9CVUNLRVQgPSBwcm9jZXNzLmVudi5VUExPQURfQlVDS0VUOwogIGNvbnN0IERZTkFNT19UQUJMRSA9IHByb2Nlc3MuZW52LkRZTkFNT19UQUJMRTsgLy8gVmFsaWRhdGlvbgoKICBjb25zdCB7CiAgICBlcnJvcjogZW52RXJyb3IKICB9ID0gdmFsaWRhdGVHZW5lcmF0ZUVudmlyb25tZW50KHByb2Nlc3MuZW52KTsKCiAgaWYgKGVudkVycm9yKSB7CiAgICByZXR1cm4gewogICAgICBzdGF0dXNDb2RlOiA0MDAsCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBlcnJvcjogIkVudmlyb25tZW50IGNvbmZpZ3VyYXRpb24gZXJyb3IiCiAgICAgIH0pLAogICAgICBoZWFkZXJzOiBjb25maWcuZGVmYXVsdEhlYWRlcnMKICAgIH07CiAgfQoKICBsZXQgcmVjb3JkOyAvLyBDaGVjayBpZiB0aGlzIHVzZXIgYWxyZWFkeSBoYXMgYSB0ZXN0IGluIHByb2dyZXNzCgogIHJlY29yZCA9IGF3YWl0IGdldFRlc3RSZWNvcmQoRFlOQU1PX1RBQkxFLCBndWlkKTsgLy8gSWYgbm90LCBnZW5lcmF0ZSB0aGVpciBzaWduZWQgdXJscyBhbmQgdGhlaXIgdGVzdCByZWNvcmQKCiAgaWYgKCFyZWNvcmQpIHsKICAgIGNvbnN0IHsKICAgICAgdXBsb2FkVXJsLAogICAgICBkb3dubG9hZFVybAogICAgfSA9IGF3YWl0IGdldFVybHMoVVBMT0FEX0JVQ0tFVCwgZ3VpZCk7CiAgICByZWNvcmQgPSB7CiAgICAgIGd1aWQsCiAgICAgIHVwbG9hZFVybCwKICAgICAgZG93bmxvYWRVcmwsCiAgICAgIHN0ZXA6ICJjaGVja1lvdXJLaXQiCiAgICB9OwogICAgYXdhaXQgcHV0VGVzdFJlY29yZChEWU5BTU9fVEFCTEUsIHJlY29yZCk7CiAgfSAvL1Jlc3BvbnNlCgoKICByZXR1cm4gewogICAgc3RhdHVzQ29kZTogMjAwLAogICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICB0ZXN0UmVjb3JkOiByZWNvcmQKICAgIH0pLAogICAgaGVhZGVyczogY29uZmlnLmRlZmF1bHRIZWFkZXJzCiAgfTsKfTs="},{"version":3,"sources":["/home/barnaby/code/antibody-web/serverless/handlers/generate/handler.ts"],"names":["getUrls","getTestRecord","putTestRecord","validateGenerateEnvironment","config","handler","event","guid","requestContext","authorizer","principalId","console","log","statusCode","body","JSON","stringify","error","headers","defaultHeaders","UPLOAD_BUCKET","process","env","DYNAMO_TABLE","envError","record","uploadUrl","downloadUrl","step","testRecord"],"mappings":"AACA,SAASA,OAAT,EAAkBC,aAAlB,EAAiCC,aAAjC,QAAsD,YAAtD;AACA,SAASC,2BAAT,QAA4C,iBAA5C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAGA,OAAO,MAAMC,OAAO,GAAG,MAAOC,KAAP,IAAkE;AAAA;;AAEvF,QAAMC,IAAI,4BAAGD,KAAK,CAACE,cAAN,CAAqBC,UAAxB,0DAAG,sBAAiCC,WAA9C;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;;AAEA,MAAI,CAACA,IAAL,EAAW;AACT,WAAO;AACLM,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAE;AADY,OAAf,CAFD;AAKLC,MAAAA,OAAO,EAAEd,MAAM,CAACe;AALX,KAAP;AAOD;;AAED,QAAMC,aAAqB,GAAGC,OAAO,CAACC,GAAR,CAAYF,aAA1C;AACA,QAAMG,YAAoB,GAAGF,OAAO,CAACC,GAAR,CAAYC,YAAzC,CAhBuF,CAkBvF;;AACA,QAAM;AAAEN,IAAAA,KAAK,EAAEO;AAAT,MAAsBrB,2BAA2B,CAACkB,OAAO,CAACC,GAAT,CAAvD;;AAEA,MAAIE,QAAJ,EAAc;AACZ,WAAO;AACLX,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAE;AADY,OAAf,CAFD;AAKLC,MAAAA,OAAO,EAAEd,MAAM,CAACe;AALX,KAAP;AAOD;;AAED,MAAIM,MAAJ,CA/BuF,CAiCvF;;AACAA,EAAAA,MAAM,GAAG,MAAMxB,aAAa,CAACsB,YAAD,EAAehB,IAAf,CAA5B,CAlCuF,CAoCvF;;AACA,MAAI,CAACkB,MAAL,EAAa;AACX,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA6B,MAAM3B,OAAO,CAACoB,aAAD,EAAgBb,IAAhB,CAAhD;AAEAkB,IAAAA,MAAM,GAAG;AACPlB,MAAAA,IADO;AAEPmB,MAAAA,SAFO;AAGPC,MAAAA,WAHO;AAIPC,MAAAA,IAAI,EAAE;AAJC,KAAT;AAOA,UAAM1B,aAAa,CAACqB,YAAD,EAAeE,MAAf,CAAnB;AACD,GAhDsF,CAkDvF;;;AACA,SAAO;AACLZ,IAAAA,UAAU,EAAE,GADP;AAELC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACJ;AACEa,MAAAA,UAAU,EAAEJ;AADd,KADI,CAFD;AAMLP,IAAAA,OAAO,EAAEd,MAAM,CAACe;AANX,GAAP;AAQD,CA3DM","sourcesContent":["import { APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\nimport { getUrls, getTestRecord, putTestRecord } from '../api/aws';\nimport { validateGenerateEnvironment } from '../api/validate';\nimport config from './config';\nimport TestRecord from 'abt-lib/models/TestRecord';\n\nexport const handler = async (event: APIGatewayEvent): Promise<APIGatewayProxyResult> => {\n\n  const guid = event.requestContext.authorizer?.principalId;\n  console.log(guid);\n\n  if (!guid) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        error: \"Missing user id\"\n      }),\n      headers: config.defaultHeaders\n    };\n  }\n\n  const UPLOAD_BUCKET: string = process.env.UPLOAD_BUCKET as string;\n  const DYNAMO_TABLE: string = process.env.DYNAMO_TABLE as string;\n  \n  // Validation\n  const { error: envError } = validateGenerateEnvironment(process.env);\n\n  if (envError) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({\n        error: \"Environment configuration error\"\n      }),\n      headers: config.defaultHeaders\n    };\n  }\n\n  let record: TestRecord | null;\n\n  // Check if this user already has a test in progress\n  record = await getTestRecord(DYNAMO_TABLE, guid);\n\n  // If not, generate their signed urls and their test record\n  if (!record) {\n    const { uploadUrl, downloadUrl } = await getUrls(UPLOAD_BUCKET, guid);\n\n    record = {\n      guid,\n      uploadUrl,\n      downloadUrl,\n      step: \"checkYourKit\"\n    } as TestRecord;\n\n    await putTestRecord(DYNAMO_TABLE, record);\n  }\n  \n  //Response\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\n      {\n        testRecord: record\n      }),\n    headers: config.defaultHeaders\n  };\n};  \n"]}]}