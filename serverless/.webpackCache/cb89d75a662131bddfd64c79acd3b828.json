{"remainingRequest":"/home/barnaby/code/antibody-web/serverless/node_modules/babel-loader/lib/index.js!/home/barnaby/code/antibody-web/serverless/api/aws.ts","dependencies":[{"path":"/home/barnaby/code/antibody-web/serverless/api/aws.ts","mtime":1590738982603},{"path":"/home/barnaby/code/antibody-web/serverless/.babelrc","mtime":1591182054525},{"path":"/home/barnaby/code/antibody-web/serverless/node_modules/cache-loader/dist/cjs.js","mtime":1591181641368},{"path":"/home/barnaby/code/antibody-web/serverless/node_modules/babel-loader/lib/index.js","mtime":1590479556893}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgRG9jdW1lbnRDbGllbnQgfSBmcm9tICJhd3Mtc2RrL2NsaWVudHMvZHluYW1vZGIiOwppbXBvcnQgQVdTU0RLIGZyb20gJ2F3cy1zZGsnOwpleHBvcnQgY29uc3QgQVdTID0gQVdTU0RLOwpleHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXJscyhidWNrZXQsIGd1aWQpIHsKICBjb25zdCBzMyA9IG5ldyBBV1MuUzMoKTsKICBjb25zdCBwYXJhbXMgPSB7CiAgICBCdWNrZXQ6IGJ1Y2tldCwKICAgIEtleTogYHJkdC1pbWFnZXMvJHtndWlkfWAKICB9OwoKICBjb25zdCBnZXRVcmwgPSBhc3luYyBtZXRob2QgPT4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgczMuZ2V0U2lnbmVkVXJsKG1ldGhvZCwgcGFyYW1zLCAoZXJyLCB1cmwpID0+IHsKICAgICAgaWYgKGVycikgewogICAgICAgIHJlamVjdChlcnIpOwogICAgICB9IGVsc2UgewogICAgICAgIHJlc29sdmUodXJsKTsKICAgICAgfQogICAgfSk7CiAgfSk7CgogIGNvbnN0IFt1cGxvYWRVcmwsIGRvd25sb2FkVXJsXSA9IGF3YWl0IFByb21pc2UuYWxsKFtnZXRVcmwoInB1dE9iamVjdCIpLCBnZXRVcmwoImdldE9iamVjdCIpXSk7CiAgcmV0dXJuIHsKICAgIHVwbG9hZFVybCwKICAgIGRvd25sb2FkVXJsCiAgfTsKfQpleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHV0VGVzdFJlY29yZCh0YWJsZSwgcmVjb3JkKSB7CiAgY29uc3QgZHluYW1vID0gbmV3IERvY3VtZW50Q2xpZW50KCk7CiAgY29uc3QgZHluYW1vUHV0UmVxID0gewogICAgVGFibGVOYW1lOiB0YWJsZSwKICAgIEl0ZW06IHJlY29yZAogIH07CiAgcmV0dXJuIGR5bmFtby5wdXQoZHluYW1vUHV0UmVxKS5wcm9taXNlKCk7Cn0KZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRlc3RSZWNvcmQodGFibGUsIGd1aWQpIHsKICBjb25zdCBkeW5hbW8gPSBuZXcgRG9jdW1lbnRDbGllbnQoKTsKICBjb25zdCBkeW5hbW9HZXRSZXEgPSB7CiAgICBUYWJsZU5hbWU6IHRhYmxlLAogICAgS2V5OiB7CiAgICAgIGd1aWQKICAgIH0KICB9OwogIGNvbnN0IGR5bmFtb1JlY29yZCA9IGF3YWl0IGR5bmFtby5nZXQoZHluYW1vR2V0UmVxKS5wcm9taXNlKCk7CiAgcmV0dXJuIChkeW5hbW9SZWNvcmQgPT09IG51bGwgfHwgZHluYW1vUmVjb3JkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkeW5hbW9SZWNvcmQuSXRlbSkgPyBkeW5hbW9SZWNvcmQuSXRlbSA6IG51bGw7Cn0="},{"version":3,"sources":["/home/barnaby/code/antibody-web/serverless/api/aws.ts"],"names":["DocumentClient","AWSSDK","AWS","getUrls","bucket","guid","s3","S3","params","Bucket","Key","getUrl","method","Promise","resolve","reject","getSignedUrl","err","url","uploadUrl","downloadUrl","all","putTestRecord","table","record","dynamo","dynamoPutReq","TableName","Item","put","promise","getTestRecord","dynamoGetReq","dynamoRecord","get"],"mappings":"AAAA,SAASA,cAAT,QAA+B,0BAA/B;AAEA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAO,MAAMC,GAAG,GAAGD,MAAZ;AAOP,OAAO,eAAeE,OAAf,CAAuBC,MAAvB,EAAuCC,IAAvC,EAA2E;AAEhF,QAAMC,EAAE,GAAG,IAAIJ,GAAG,CAACK,EAAR,EAAX;AACA,QAAMC,MAAM,GAAG;AAAEC,IAAAA,MAAM,EAAEL,MAAV;AAAkBM,IAAAA,GAAG,EAAG,cAAaL,IAAK;AAA1C,GAAf;;AAEA,QAAMM,MAAM,GAAG,MAAOC,MAAP,IAA2C,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/FT,IAAAA,EAAE,CAACU,YAAH,CAAgBJ,MAAhB,EAAwBJ,MAAxB,EAAgC,CAACS,GAAD,EAAMC,GAAN,KAAsB;AACpD,UAAID,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO,CAACI,GAAD,CAAP;AACD;AACF,KAND;AAOD,GAR+D,CAAhE;;AAUA,QAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2B,MAAMP,OAAO,CAACQ,GAAR,CAAY,CAACV,MAAM,CAAC,WAAD,CAAP,EAAsBA,MAAM,CAAC,WAAD,CAA5B,CAAZ,CAAvC;AAEA,SAAO;AACLQ,IAAAA,SADK;AAELC,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,eAAeE,aAAf,CAA6BC,KAA7B,EAA4CC,MAA5C,EAAgE;AAErE,QAAMC,MAAM,GAAG,IAAIzB,cAAJ,EAAf;AAEA,QAAM0B,YAAyC,GAAG;AAChDC,IAAAA,SAAS,EAAEJ,KADqC;AAEhDK,IAAAA,IAAI,EAAEJ;AAF0C,GAAlD;AAKA,SAAOC,MAAM,CAACI,GAAP,CAAWH,YAAX,EAAyBI,OAAzB,EAAP;AACD;AAED,OAAO,eAAeC,aAAf,CAA6BR,KAA7B,EAA4ClB,IAA5C,EAAsF;AAC3F,QAAMoB,MAAM,GAAG,IAAIzB,cAAJ,EAAf;AAEA,QAAMgC,YAAyC,GAAG;AAChDL,IAAAA,SAAS,EAAEJ,KADqC;AAEhDb,IAAAA,GAAG,EAAE;AACHL,MAAAA;AADG;AAF2C,GAAlD;AAOA,QAAM4B,YAAY,GAAG,MAAMR,MAAM,CAACS,GAAP,CAAWF,YAAX,EAAyBF,OAAzB,EAA3B;AAEA,SAAO,CAAAG,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEL,IAAd,IAAqBK,YAAY,CAACL,IAAlC,GAAuD,IAA9D;AACD","sourcesContent":["import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nimport TestRecord from \"abt-lib/models/TestRecord\";\nimport AWSSDK from 'aws-sdk';\nexport const AWS = AWSSDK;\n\ninterface UrlResponse {\n  uploadUrl: string;\n  downloadUrl: string;\n}\n\nexport async function getUrls(bucket: string, guid: string): Promise<UrlResponse> {\n\n  const s3 = new AWS.S3();\n  const params = { Bucket: bucket, Key: `rdt-images/${guid}` };\n\n  const getUrl = async (method: string): Promise<string> => await new Promise((resolve, reject) => {\n    s3.getSignedUrl(method, params, (err, url: string) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(url);\n      }\n    });\n  });\n\n  const [uploadUrl, downloadUrl] = await Promise.all([getUrl(\"putObject\"), getUrl(\"getObject\")]);\n  \n  return {\n    uploadUrl,\n    downloadUrl\n  };\n}\n\nexport async function putTestRecord(table: string, record: TestRecord) {\n\n  const dynamo = new DocumentClient();\n\n  const dynamoPutReq: DocumentClient.PutItemInput = {\n    TableName: table,\n    Item: record\n  };\n\n  return dynamo.put(dynamoPutReq).promise();\n}\n\nexport async function getTestRecord(table: string, guid: string): Promise<TestRecord | null> {\n  const dynamo = new DocumentClient();\n\n  const dynamoGetReq: DocumentClient.GetItemInput = {\n    TableName: table,\n    Key: {\n      guid\n    }\n  };\n\n  const dynamoRecord = await dynamo.get(dynamoGetReq).promise();\n\n  return dynamoRecord?.Item ? dynamoRecord.Item as TestRecord : null;\n}\n"]}]}